Тестовое задание

Сделать фотоальбом на Django и DRF, покрыть тестами API запросы и модули - модульные и интеграционные тесты. 
Разработать только бэкенд-часть.
+ обязательна регистрация и авторизация перед использованием, работа по токену.
+ manage.py команда для первоначального заполнения данными.
+ безопасность - пользователи не должны видеть чужие альбомы.
+ название главного модуля должно быть "app".
+ API методы должны начинаться с /api/v1/
+ Файлы можно загружать не более определенного размера (5 мб) - форматы PNG (*.png), JPEG (*.jpg, *.jpeg).
+ Должна быть стандартная админка Django.
+ При запросе фотографий из альбома должны возвращаться не только оригинальные размеры,
но и уменьшенные копии - 150 пикселей по бОльшей стороне.
+ Придерживаться "толстых моделей" и KISS.
+ Методы API - авторизация, регистрация, создавать фотографии с названием, изменять название фотографий,
получить список фотографий, получить конкретную фотографию.
+ При запросе детальной фотографии должен увеличиваться счетчик просмотра этой фотографии на 1.
+ После загрузки фотографии, она преобразовывается также в формат webp. Т.е. возвращается в двух форматах - оригинал и webp.
+ Должна быть возможность выгрузить топ 10 самых просматриваемых фото всего сайта и пользователя в видео слайд шоу в формате (webm).
- Раз в день/месяц уведомлять пользователя, что его фото попало в топ 3 самых просматриваемых.
- Уведомления должны приходить на email. 
+ Должна быть возможность изменять текст уведомления из админки.
+ Для фото должны быть еще нередактируемые пользователем поля - дата создания,
+ Подключить документацию DRF.
+ Покрыть вышеперечисленное тестами.
+ должно проходить pylint (кодстайл должен быть pep8, ошибок не должно быть, coverage должен быть больше или равен 90%).
+ лицевую часть делать не надо - только REST и админка.

Что будет проверяться:
* Правильность архитектуры проекта.
* Правильность работы проекта.
* Соблюдение стайлгайда PEP8.
* Знание Python.
* Понимание REST.
* Умение работы с системным ПО.
* Умение работы с внешними системами.
* Умение писать автотесты.
* Умение читать задание.

Результат выложить на github.com и предоставить ссылку на репозиторий

Вопросы:
    - В ТЗ не прописано удаление фото
    - В ТЗ указаны методы которые должны быть и среди них нет топов по сайту и пользователям
